# PIPELINE DEFINITION
# Name: docling-s3in-s3out
# Inputs:
#    batch_size: int [Default: 20.0]
#    convertion_options: dict [Default: {'force_ocr': False, 'do_code_enrichment': False, 'do_formula_enrichment': False, 'do_picture_classification': False, 'to_formats': ['md', 'json', 'html', 'text', 'doctags'], 'return_as_file': False, 'include_images': True, 'abort_on_error': False, 'ocr_lang': [], 'do_picture_description': False, 'ocr_engine': 'easyocr', 'table_mode': 'accurate', 'images_scale': 2.0, 'image_export_mode': 'placeholder', 'generate_picture_images': False, 'do_ocr': True, 'from_formats': ['docx', 'pptx', 'html', 'image', 'pdf', 'asciidoc', 'md', 'xlsx', 'xml_uspto', 'xml_jats', 'json_docling'], 'pdf_backend': 'dlparse_v2', 'do_table_structure': True}]
#    source: dict [Default: {'s3_source_prefix': 'my-docs', 's3_source_ssl': True, 's3_source_access_key': '123454321', 's3_source_bucket': 'source-bucket', 's3_source_secret_key': 'secretsecret', 's3_source_endpoint': 's3.eu-de.cloud-object-storage.appdomain.cloud'}]
#    target: dict [Default: {'s3_target_access_key': '123454321', 's3_target_endpoint': 's3.eu-de.cloud-object-storage.appdomain.cloud', 's3_target_prefix': 'my-docs', 's3_target_bucket': 'target-bucket', 's3_target_secret_key': 'secretsecret', 's3_target_ssl': True}]
components:
  comp-compute-batches:
    executorLabel: exec-compute-batches
    inputDefinitions:
      parameters:
        batch_size:
          defaultValue: 10.0
          isOptional: true
          parameterType: NUMBER_INTEGER
        source:
          parameterType: STRUCT
        target:
          parameterType: STRUCT
    outputDefinitions:
      parameters:
        Output:
          parameterType: LIST
  comp-convert-payload:
    executorLabel: exec-convert-payload
    inputDefinitions:
      parameters:
        options:
          parameterType: STRUCT
        pre_signed_urls:
          parameterType: LIST
        target:
          parameterType: STRUCT
    outputDefinitions:
      parameters:
        Output:
          parameterType: LIST
  comp-for-loop-1:
    dag:
      tasks:
        convert-payload:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-convert-payload
          inputs:
            parameters:
              options:
                componentInputParameter: pipelinechannel--convertion_options
              pre_signed_urls:
                componentInputParameter: pipelinechannel--compute-batches-Output-loop-item
              target:
                componentInputParameter: pipelinechannel--target
          taskInfo:
            name: convert-payload
    inputDefinitions:
      parameters:
        pipelinechannel--compute-batches-Output:
          parameterType: LIST
        pipelinechannel--compute-batches-Output-loop-item:
          parameterType: LIST
        pipelinechannel--convertion_options:
          parameterType: STRUCT
        pipelinechannel--target:
          parameterType: STRUCT
deploymentSpec:
  executors:
    exec-compute-batches:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - compute_batches
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pydantic' 'boto3~=1.35.36'\
          \ 'git+https://github.com/docling-project/docling-jobkit@f898ea96f8c1b8360c837dca41c4295a0fecbca5'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef compute_batches(\n    source: dict,\n    target: dict,\n    batch_size:\
          \ int = 10,\n) -> List[List[str]]:\n    from docling_jobkit.connectors.s3_helper\
          \ import (\n        S3Coordinates,\n        check_target_has_source_converted,\n\
          \        generate_presigns_url,\n        get_s3_connection,\n        get_source_files,\n\
          \    )\n\n    s3_target_coords = S3Coordinates(\n        endpoint=target[\"\
          s3_target_endpoint\"],\n        verify_ssl=target[\"s3_target_ssl\"],\n\
          \        access_key=target[\"s3_target_access_key\"],\n        secret_key=target[\"\
          s3_target_secret_key\"],\n        bucket=target[\"s3_target_bucket\"],\n\
          \        key_prefix=target[\"s3_target_prefix\"],\n    )\n\n    s3_coords_source\
          \ = S3Coordinates(\n        endpoint=source[\"s3_source_endpoint\"],\n \
          \       verify_ssl=source[\"s3_source_ssl\"],\n        access_key=source[\"\
          s3_source_access_key\"],\n        secret_key=source[\"s3_source_secret_key\"\
          ],\n        bucket=source[\"s3_source_bucket\"],\n        key_prefix=source[\"\
          s3_source_prefix\"],\n    )\n\n    s3_source_client, s3_source_resource\
          \ = get_s3_connection(s3_coords_source)\n    source_objects_list = get_source_files(\n\
          \        s3_source_client, s3_source_resource, s3_coords_source\n    )\n\
          \    filtered_source_keys = check_target_has_source_converted(\n       \
          \ s3_target_coords, source_objects_list, s3_coords_source.key_prefix\n \
          \   )\n    presigned_urls = generate_presigns_url(\n        s3_source_client,\n\
          \        filtered_source_keys,\n        s3_coords_source.bucket,\n     \
          \   batch_size=batch_size,\n        expiration_time=36000,\n    )\n\n  \
          \  return presigned_urls\n\n"
        image: python:3.11
    exec-convert-payload:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - convert_payload
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'docling==2.28.0'\
          \ 'git+https://github.com/docling-project/docling-jobkit@f898ea96f8c1b8360c837dca41c4295a0fecbca5'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef convert_payload(\n    options: dict,\n    target: dict,\n   \
          \ pre_signed_urls: List[str],\n) -> list:\n    import logging\n\n    from\
          \ docling.datamodel.pipeline_options import (\n        PdfPipelineOptions,\n\
          \        TableFormerMode,\n        OcrOptions\n    )\n    from docling.models.factories\
          \ import get_ocr_factory\n\n    from docling_jobkit.connectors.s3_helper\
          \ import (\n        DoclingConvert,\n        S3Coordinates,\n    )\n\n \
          \   logging.basicConfig(level=logging.INFO)\n\n    logging.info(\"Type of\
          \ pre_signed_urls: {}\".format(type(pre_signed_urls)))\n\n    s3_coords\
          \ = S3Coordinates(\n        endpoint=target[\"s3_target_endpoint\"],\n \
          \       verify_ssl=target[\"s3_target_ssl\"],\n        access_key=target[\"\
          s3_target_access_key\"],\n        secret_key=target[\"s3_target_secret_key\"\
          ],\n        bucket=target[\"s3_target_bucket\"],\n        key_prefix=target[\"\
          s3_target_prefix\"],\n    )\n\n    pipeline_options = PdfPipelineOptions()\n\
          \    pipeline_options.do_ocr = options[\"do_ocr\"]\n    ocr_factory = get_ocr_factory()\n\
          \n    pipeline_options.ocr_options = cast(\n        OcrOptions, ocr_factory.create_options(kind=options[\"\
          ocr_engine\"])\n    )\n\n    pipeline_options.do_table_structure = options[\"\
          do_table_structure\"]\n    pipeline_options.table_structure_options.mode\
          \ = TableFormerMode(\n        options[\"table_mode\"]\n    )\n    pipeline_options.generate_page_images\
          \ = options[\"include_images\"]\n    pipeline_options.do_code_enrichment\
          \ = options[\"do_code_enrichment\"]\n    pipeline_options.do_formula_enrichment\
          \ = options[\"do_formula_enrichment\"]\n    pipeline_options.do_picture_classification\
          \ = options[\"do_picture_classification\"]\n    pipeline_options.do_picture_description\
          \ = options[\"do_picture_description\"]\n    pipeline_options.generate_picture_images\
          \ = options[\"generate_picture_images\"]\n\n    # pipeline_options.accelerator_options\
          \ = AcceleratorOptions(\n    #     num_threads=2, device=AcceleratorDevice.CUDA\n\
          \    # )\n\n    converter = DoclingConvert(s3_coords, pipeline_options)\n\
          \n    results = []\n    for item in converter.convert_documents(pre_signed_urls):\n\
          \        results.append(item)\n        logging.info(\"Convertion result:\
          \ {}\".format(item))\n\n    return results\n\n"
        image: quay.io/docling-project/docling-serve:dev-0.0.7
        resources:
          cpuLimit: 1.0
          cpuRequest: 0.2
          memoryLimit: 7.0
          memoryRequest: 1.0
pipelineInfo:
  name: docling-s3in-s3out
root:
  dag:
    tasks:
      compute-batches:
        cachingOptions: {}
        componentRef:
          name: comp-compute-batches
        inputs:
          parameters:
            batch_size:
              componentInputParameter: batch_size
            source:
              componentInputParameter: source
            target:
              componentInputParameter: target
        taskInfo:
          name: compute-batches
      for-loop-1:
        componentRef:
          name: comp-for-loop-1
        dependentTasks:
        - compute-batches
        inputs:
          parameters:
            pipelinechannel--compute-batches-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: compute-batches
            pipelinechannel--convertion_options:
              componentInputParameter: convertion_options
            pipelinechannel--target:
              componentInputParameter: target
        iteratorPolicy:
          parallelismLimit: 3
        parameterIterator:
          itemInput: pipelinechannel--compute-batches-Output-loop-item
          items:
            inputParameter: pipelinechannel--compute-batches-Output
        taskInfo:
          name: for-loop-1
  inputDefinitions:
    parameters:
      batch_size:
        defaultValue: 20.0
        isOptional: true
        parameterType: NUMBER_INTEGER
      convertion_options:
        defaultValue:
          abort_on_error: false
          do_code_enrichment: false
          do_formula_enrichment: false
          do_ocr: true
          do_picture_classification: false
          do_picture_description: false
          do_table_structure: true
          force_ocr: false
          from_formats:
          - docx
          - pptx
          - html
          - image
          - pdf
          - asciidoc
          - md
          - xlsx
          - xml_uspto
          - xml_jats
          - json_docling
          generate_picture_images: false
          image_export_mode: placeholder
          images_scale: 2.0
          include_images: true
          ocr_engine: easyocr
          ocr_lang: []
          pdf_backend: dlparse_v2
          return_as_file: false
          table_mode: accurate
          to_formats:
          - md
          - json
          - html
          - text
          - doctags
        isOptional: true
        parameterType: STRUCT
      source:
        defaultValue:
          s3_source_access_key: '123454321'
          s3_source_bucket: source-bucket
          s3_source_endpoint: s3.eu-de.cloud-object-storage.appdomain.cloud
          s3_source_prefix: my-docs
          s3_source_secret_key: secretsecret
          s3_source_ssl: true
        isOptional: true
        parameterType: STRUCT
      target:
        defaultValue:
          s3_target_access_key: '123454321'
          s3_target_bucket: target-bucket
          s3_target_endpoint: s3.eu-de.cloud-object-storage.appdomain.cloud
          s3_target_prefix: my-docs
          s3_target_secret_key: secretsecret
          s3_target_ssl: true
        isOptional: true
        parameterType: STRUCT
schemaVersion: 2.1.0
sdkVersion: kfp-2.8.0
